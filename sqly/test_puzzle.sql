-- given numbers are sums of row or column sets
-- -1 is a dud
-- 0 is an empty cell to fill in

-- puzzle
-1,3,5;
5,0,0;
3,0,0
-- completed
-1,3,5;
5,2,3;
3,1,2


/*
    // 10x10 from The Mepham Group
    const cellData = [
        [ [-1, -1],  [-1 -1],  [17, -1], [37, -1], [-1, -1], [7, -1],  [5, -1], [4, -1], [12, -1], [-1, -1],],
        [ [-1, -1], [7,  12],        0,        0, [-1, 11],        0,        0,       0,        0,  [8, -1],],
        [ [-1, 10],        0,        0,        0,  [7, 15],        0,        0,       0,        0,        0,],
        [ [-1, 19],        0,        0,        0,        0,        0, [-1, -1], [36, 5],        0,        0,],
        [ [-1, 19],        0,        0,        0,        0, [-1, -1], [20, 12],       0,        0, [-1, -1],],
        [ [-1, -1], [-1, -1],  [27, 5],        0,        0, [-1, 17],        0,       0, [25, -1], [10, -1],],
        [ [-1, -1], [10, 13],        0,        0, [-1, -1],  [8, 13],        0,       0,        0,        0,],
        [ [-1, 12],        0,        0, [15, -1], [16, 32],        0,        0,       0,        0,        0,],
        [ [-1, 24],        0,        0,        0,        0,        0,  [-1, 7],       0,        0,        0,],
        [ [-1, -1], [-1, 29],        0,        0,        0,        0, [-1, 16],       0,        0, [-1, -1],],
    ];
    */

/*
    // 10x10 from The Mepham Group
const cellData = [
    [ [-1, -1],  [7, -1],  [7, -1], [23, -1], [-1, -1], [-1, -1], [15, -1], [20, -1], [34, -1], [-1, -1],],
    [ [-1,  6],        0,        0,        0, [10, -1], [-1, 23],        0,        0,        0, [10, -1],],
    [ [-1, 16],        0,        0,        0,        0, [16, 28],        0,        0,        0,        0,],
    [ [-1, -1], [-1, 19],        0,        0,        0,        0, [-1, 10],        0,        0,        0,],
    [ [-1, -1], [11, -1],  [30, 9],        0,        0,        0,  [10, -1], [27, 7],        0,        0,],
    [ [-1, 45],        0,        0,        0,        0,        0,        0,        0,        0,        0,],
    [ [-1, 4],         0,        0,  [7, -1], [-1, 11],        0,        0,        0, [21, -1],  [-1,-1],],
    [ [-1, 14],        0,        0,        0,  [3, 21],        0,        0,        0,        0,  [4, -1],],
    [ [-1, 13],        0,        0,        0,        0, [-1, 15],        0,        0,        0,        0,],
    [ [-1, -1],  [-1, 7],        0,        0,        0, [-1, -1],  [-1, 7],        0,        0,        0,],
];
*/
/*

        // 10x10 from The Mepham Group (original puzzle that got me interested)
            const cellData = [
                [ [-1, -1], [14, -1], [16, -1], [-1, -1], [-1, -1], [10, -1], [16, -1], [40, -1], [11, -1], [-1, -1],],
                [ [-1, 13],        0,        0, [36, -1], [-1, 17],        0,        0,        0,        0,  [3, -1],],
                [ [-1, 20],        0,        0,        0, [28, 18],        0,        0,        0,        0,        0,],
                [ [-1, -1],  [5, -1],  [8, 13],        0,        0,        0, [17, 19],        0,        0,        0,],
                [ [-1, 16],        0,        0,        0,        0,  [-1, 6],        0,        0, [12, -1],  [4, -1],],
                [ [-1, 12],        0,        0,        0,        0, [-1, 12],        0,        0,        0,        0,],
                [ [-1, -1], [10, -1], [11, 17],        0,        0, [13, 20],        0,        0,        0,        0,],
                [ [-1, 22],        0,        0,        0,  [3, 19],        0,        0,        0,  [4, -1], [12, -1],],
                [ [-1, 20],        0,        0,        0,        0,        0,  [-1, 8],        0,        0,        0,],
                [ [-1, -1], [-1, 11],        0,        0,        0,        0, [-1, -1], [-1, 10],        0,        0,],
            ];
*/

/*

    // 3x3
        const cellData = [
            [[-1, -1], [5, -1], [6, -1]],
            [[-1, 8],        0,       0],
            [[-1, 3],        0,       0]
        ];
*/
/*

        // 4x3, not a unique solution
            const cellData = [
                [[-1, -1], [3, -1], [7, -1], [7, -1]],
                [[-1, 11],        2,       5,      3],
                [[-1, 6],         1,       2,      3]
            ];
*/
/*
// 4x4, from kakuros.com
const cellData = [
    [[-1, -1], [20, -1], [12, -1], [10, -1]],
    [[-1, 24],       -1,       -1,       -1],
    [[-1, 11],       -1,       -1,       -1],
    [[-1, 7],        -1,       -1,       -1]
];
*/
/*
    // 5x5, from kakuros.com
    const cellData = [
        [[-1, -1], [16, -1], [7, -1], [-1, -1], [-1, -1]],
        [[-1, 13],       -1,      -1, [23, -1], [-1, -1]],
        [[-1, 16],       -1,      -1,       -1,  [4, -1]],
        [[-1, -1], [-1, 14],      -1,       -1,       -1],
        [[-1, -1], [-1, -1], [-1, 7],       -1,       -1]
    ];
*/
/*
    // from above 5x5 cellData, solver.solve(), saveGame()
    const cellData = [[[-1,-1],[16,-1],[7,-1],[-1,-1],[-1,-1]],[[-1,13],9,4,[23,-1],[-1,-1]],[[-1,16],7,1,8,[4,-1]],[[-1,-1],[-1,14],2,9,3],[[-1,-1],[-1,-1],[-1,7],6,1]];
    */
/*
    // 9x8, from kakuros.com
    const cellData = [
        [[-1, -1], [-1, -1], [-1, -1], [14, -1], [4, -1], [-1, -1], [-1, -1], [-1, -1]],
        [[-1, -1], [18, -1], [31, 8],        -1,      -1, [7, -1], [-1, -1], [-1, -1]],
        [[-1, 28],       -1,       -1,       -1,      -1,       -1,  [20, -1], [-1, -1]],
        [[-1, 6],       -1,       -1, [-1, -1], [-1, 8],      -1,       -1, [-1, -1]],
        [[-1, 17],       -1,       -1, [13, -1], [-1, 9],       -1,       -1, [19, -1]],
        [[-1, -1], [-1, 16],       -1,       -1, [-1, -1], [-1, 6],       -1,       -1],
        [[-1, -1], [-1, 4],       -1,       -1, [17, -1], [6, 12],       -1,       -1],
        [[-1, -1], [-1, -1], [-1, 25],       -1,       -1,       -1,       -1,       -1],
        [[-1, -1], [-1, -1], [-1, -1], [-1, 10],       -1,       -1, [-1, -1], [-1, -1]],
    ];
*/

